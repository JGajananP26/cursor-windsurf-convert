# .clinerules for cursor-windsurf-convert (cuws)

## Project Initialization Phase (7 May 2025)

This file captures project-specific intelligence, patterns, user preferences, and key decisions for the `cursor-windsurf-convert` project. As the project evolves, this file will be updated.

## 1. Core Principles & Preferences

*   **Adherence to PRD:** The `docs/prd.md` is the primary source of truth for MVP requirements. All development should align with it.
*   **Memory Bank Driven:** Cline (the AI engineer) relies entirely on the `memory-bank/` files. These MUST be kept up-to-date and accurate.
    *   `activeContext.md` and `progress.md` are critical for tracking current state.
*   **Lossless Conversion:** This is a paramount requirement. No data (metadata or content) should be lost or unintentionally altered during conversion.
*   **Performance:** Strive for the performance goals (≤ 50 ms for 1kB file, ≤ 1MB memory for 100kB file).
*   **Clarity in CLI:** Error messages, help text, and general output should be clear and user-friendly.
*   **Modularity:** Maintain separation of concerns (parser, mapper, CLI, API). `mapper.ts` is central to conversion logic.
*   **Test Coverage:** Aim for 100% branch coverage for `mapper.ts` and comprehensive E2E/fixture tests.

## 2. Key Technical Patterns & Decisions (Initial)

*   **Dependencies:**
    *   Runtime: `gray-matter`, `yargs`, `fast-glob`.
    *   Dev/Build: `typescript`, `unbuild`, `vitest`, `biome`.
*   **Node.js Version:** ≥18 LTS.
*   **Module System:** ESM primary, CJS for API compatibility.
*   **Streaming:** Use `stream.pipeline()` for I/O.
*   **Error Handling:** Standardized error codes (E01-E03) and non-zero exit codes.
*   **CI/CD:** GitHub Actions for lint, test, publish. (To be implemented)

## 3. Tool Usage Patterns (for Cline)

*   **File Creation/Overwriting:** Use `write_to_file` for initial creation or complete rewrites of Memory Bank files or new source files.
*   **Targeted Edits:** Use `replace_in_file` for modifications to existing code or documentation. Always use the `final_file_content` as the basis for `SEARCH` blocks.
*   **Information Gathering:**
    *   `read_file` for specific file contents.
    *   `list_files` to explore directories (e.g., checking `.github/`).
    *   `search_files` for broader code searches if needed.
*   **Command Execution:** Use `execute_command` for build, test, lint scripts. Ensure commands are appropriate for macOS (`zsh`).
*   **Memory Bank Updates:**
    *   Triggered by: discovering new patterns, significant changes, user request ("update memory bank").
    *   Process: Review ALL memory bank files, document current state, clarify next steps, update `.clinerules`.

## 4. User Preferences (Gordon - Lead AI Engineering)

*   (To be populated as preferences are observed or stated)
*   Initial preference: Thorough documentation via Memory Bank.
*   Preference for `pnpm` as package manager.
*   Preference for `biome` for linting/formatting.

## 5. Known Challenges & Areas to Watch

*   **Windows CMD Quirks:** Excluded from MVP, but potential future complexity. Focus on PowerShell for Windows.
*   **Future Schema Changes:** Plan for extensibility/warnings for future rule schema updates (v1.2).
*   **Complex Glob Patterns:** Document Windsurf's constraints; may need fallback for very complex cases.
*   **Dependency Discrepancy:** PRD's "zero runtime deps" vs. `fast-glob` for directory mode. Acknowledged that `fast-glob` is a necessary runtime dep for full CLI functionality.

## 6. Evolution of Project Decisions

*   (To be populated as decisions are made or changed throughout the project lifecycle)

---
This file will be updated iteratively as the project progresses.
